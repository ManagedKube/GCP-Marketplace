---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.namePrefix }}-grafana
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.namePrefix }}-grafana
  template:
    metadata:
      labels:
        app: {{ .Values.namePrefix }}-grafana
    spec:
      containers:
        - name: grafana
          image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
          imagePullPolicy: "{{ .Values.grafana.image.pullPolicy }}"
          env:
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          # - name: GF_SERVER_ROOT_URL
          #   value: "http://grafana.${ENVIRONMENT}.${BASE_DOMAIN_NAME}"
          - name: GF_SECURITY_ADMIN_USER
            value: "{{ .Values.grafana.credentials.user }}"
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: "{{ .Values.grafana.credentials.password }}"
          # - name: GF_INSTALL_PLUGINS
          #   value: grafana-kubernetes-app
          ports:
          - name: web
            containerPort: 3000
          resources:
            limits:
              cpu: {{ .Values.grafana.resources.limits.cpu }}
              memory: {{ .Values.grafana.resources.limits.memory }}
            requests:
              cpu: {{ .Values.grafana.resources.requests.cpu }}
              memory: {{ .Values.grafana.resources.requests.memory }}
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
          - name: grafana-dashboard-config
            mountPath: /etc/grafana/provisioning/dashboards
          - name: grafana-datasource
            mountPath: /etc/grafana/provisioning/datasources
          - name: grafana-dashboards
            mountPath: /opt/dashboards

      volumes:
      - name: grafana-dashboard-config
        configMap:
          name: {{ .Values.namePrefix }}-grafana-dashboard-config
      - name: grafana-dashboards
        configMap:
          name: {{ .Values.namePrefix }}-grafana-dashboards
      - name: grafana-datasource
        configMap:
          name: {{ .Values.namePrefix }}-grafana-datasource

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ .Values.namePrefix }}-grafana
  name: {{ .Values.namePrefix }}-grafana
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Values.namePrefix }}-grafana
  ports:
  - name: web
    {{ if .Values.grafana.enableLoadbalancer }}
    port: 80
    {{ else }}
    port: 3000
    {{ end }}
    targetPort: 3000
  {{ if .Values.grafana.enableLoadbalancer }}
  type: LoadBalancer
  {{ end }}
